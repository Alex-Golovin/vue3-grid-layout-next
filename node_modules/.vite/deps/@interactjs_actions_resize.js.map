{
  "version": 3,
  "sources": ["../../.pnpm/@interactjs+actions@1.10.27_@interactjs+core@1.10.27_@interactjs+utils@1.10.27__@interactjs+utils@1.10.27/node_modules/@interactjs/actions/resize/plugin.ts", "../../.pnpm/@interactjs+actions@1.10.27_@interactjs+core@1.10.27_@interactjs+utils@1.10.27__@interactjs+utils@1.10.27/node_modules/@interactjs/actions/resize/index.ts"],
  "sourcesContent": ["import type { Interactable } from '@interactjs/core/Interactable'\nimport type { EventPhase, InteractEvent } from '@interactjs/core/InteractEvent'\nimport type { Interaction } from '@interactjs/core/Interaction'\nimport type { PerActionDefaults } from '@interactjs/core/options'\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type {\n  ActionName,\n  ActionProps,\n  EdgeOptions,\n  FullRect,\n  ListenersArg,\n  OrBoolean,\n  Point,\n  Rect,\n} from '@interactjs/core/types'\nimport * as dom from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\n\nexport type EdgeName = 'top' | 'left' | 'bottom' | 'right'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    resizable(): ResizableOptions\n    resizable(options: Partial<OrBoolean<ResizableOptions>> | boolean): this\n    /**\n     * ```js\n     * interact(element).resizable({\n     *   onstart: function (event) {},\n     *   onmove : function (event) {},\n     *   onend  : function (event) {},\n     *\n     *   edges: {\n     *     top   : true,       // Use pointer coords to check for resize.\n     *     left  : false,      // Disable resizing from left edge.\n     *     bottom: '.resize-s',// Resize if pointer target matches selector\n     *     right : handleEl    // Resize if pointer target is the given Element\n     *   },\n     *\n     *   // Width and height can be adjusted independently. When `true`, width and\n     *   // height are adjusted at a 1:1 ratio.\n     *   square: false,\n     *\n     *   // Width and height can be adjusted independently. When `true`, width and\n     *   // height maintain the aspect ratio they had when resizing started.\n     *   preserveAspectRatio: false,\n     *\n     *   // a value of 'none' will limit the resize rect to a minimum of 0x0\n     *   // 'negate' will allow the rect to have negative width/height\n     *   // 'reposition' will keep the width/height positive by swapping\n     *   // the top and bottom edges and/or swapping the left and right edges\n     *   invert: 'none' || 'negate' || 'reposition'\n     *\n     *   // limit multiple resizes.\n     *   // See the explanation in the {@link Interactable.draggable} example\n     *   max: Infinity,\n     *   maxPerElement: 1,\n     * })\n     *\n     * var isResizeable = interact(element).resizable()\n     * ```\n     *\n     * Gets or sets whether resize actions can be performed on the target\n     *\n     * @param options - true/false or An object with event\n     * listeners to be fired on resize events (object makes the Interactable\n     * resizable)\n     * @returns A boolean indicating if this can be the\n     * target of resize elements, or this Interactable\n     */\n    resizable(options?: Partial<OrBoolean<ResizableOptions>> | boolean): this | ResizableOptions\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction<T extends ActionName | null = ActionName> {\n    resizeAxes: 'x' | 'y' | 'xy'\n    styleCursor(newValue: boolean): this\n    styleCursor(): boolean\n    resizeStartAspectRatio: number\n  }\n}\n\ndeclare module '@interactjs/core/options' {\n  interface ActionDefaults {\n    resize: ResizableOptions\n  }\n}\n\ndeclare module '@interactjs/core/types' {\n  interface ActionMap {\n    resize?: typeof resize\n  }\n}\n\nexport interface ResizableOptions extends PerActionDefaults {\n  square?: boolean\n  preserveAspectRatio?: boolean\n  edges?: EdgeOptions | null\n  axis?: 'x' | 'y' | 'xy' // deprecated\n  invert?: 'none' | 'negate' | 'reposition'\n  margin?: number\n  squareResize?: boolean\n  oninertiastart?: ListenersArg\n  onstart?: ListenersArg\n  onmove?: ListenersArg\n  onend?: ListenersArg\n}\n\nexport interface ResizeEvent<P extends EventPhase = EventPhase> extends InteractEvent<'resize', P> {\n  deltaRect?: FullRect\n  edges?: ActionProps['edges']\n}\n\nfunction install(scope: Scope) {\n  const {\n    actions,\n    browser,\n    Interactable, // tslint:disable-line no-shadowed-variable\n    defaults,\n  } = scope\n\n  // Less Precision with touch input\n\n  resize.cursors = initCursors(browser)\n  resize.defaultMargin = browser.supportsTouch || browser.supportsPointerEvent ? 20 : 10\n\n  Interactable.prototype.resizable = function (this: Interactable, options: ResizableOptions | boolean) {\n    return resizable(this, options, scope)\n  } as Interactable['resizable']\n\n  actions.map.resize = resize\n  actions.methodDict.resize = 'resizable'\n\n  defaults.actions.resize = resize.defaults\n}\n\nfunction resizeChecker(arg) {\n  const { interaction, interactable, element, rect, buttons } = arg\n\n  if (!rect) {\n    return undefined\n  }\n\n  const page = extend({}, interaction.coords.cur.page)\n  const resizeOptions = interactable.options.resize\n\n  if (\n    !(resizeOptions && resizeOptions.enabled) ||\n    // check mouseButton setting if the pointer is down\n    (interaction.pointerIsDown &&\n      /mouse|pointer/.test(interaction.pointerType) &&\n      (buttons & resizeOptions.mouseButtons) === 0)\n  ) {\n    return undefined\n  }\n\n  // if using resize.edges\n  if (is.object(resizeOptions.edges)) {\n    const resizeEdges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false,\n    }\n\n    for (const edge in resizeEdges) {\n      resizeEdges[edge] = checkResizeEdge(\n        edge,\n        resizeOptions.edges[edge],\n        page,\n        interaction._latestPointer.eventTarget,\n        element,\n        rect,\n        resizeOptions.margin || resize.defaultMargin,\n      )\n    }\n\n    resizeEdges.left = resizeEdges.left && !resizeEdges.right\n    resizeEdges.top = resizeEdges.top && !resizeEdges.bottom\n\n    if (resizeEdges.left || resizeEdges.right || resizeEdges.top || resizeEdges.bottom) {\n      arg.action = {\n        name: 'resize',\n        edges: resizeEdges,\n      }\n    }\n  } else {\n    const right = resizeOptions.axis !== 'y' && page.x > rect.right - resize.defaultMargin\n    const bottom = resizeOptions.axis !== 'x' && page.y > rect.bottom - resize.defaultMargin\n\n    if (right || bottom) {\n      arg.action = {\n        name: 'resize',\n        axes: (right ? 'x' : '') + (bottom ? 'y' : ''),\n      }\n    }\n  }\n\n  return arg.action ? false : undefined\n}\n\nfunction resizable(interactable: Interactable, options: OrBoolean<ResizableOptions> | boolean, scope: Scope) {\n  if (is.object(options)) {\n    interactable.options.resize.enabled = options.enabled !== false\n    interactable.setPerAction('resize', options)\n    interactable.setOnEvents('resize', options)\n\n    if (is.string(options.axis) && /^x$|^y$|^xy$/.test(options.axis)) {\n      interactable.options.resize.axis = options.axis\n    } else if (options.axis === null) {\n      interactable.options.resize.axis = scope.defaults.actions.resize.axis\n    }\n\n    if (is.bool(options.preserveAspectRatio)) {\n      interactable.options.resize.preserveAspectRatio = options.preserveAspectRatio\n    } else if (is.bool(options.square)) {\n      interactable.options.resize.square = options.square\n    }\n\n    return interactable\n  }\n  if (is.bool(options)) {\n    interactable.options.resize.enabled = options\n\n    return interactable\n  }\n  return interactable.options.resize\n}\n\nfunction checkResizeEdge(\n  name: string,\n  value: any,\n  page: Point,\n  element: Node,\n  interactableElement: Element,\n  rect: Rect,\n  margin: number,\n) {\n  // false, '', undefined, null\n  if (!value) {\n    return false\n  }\n\n  // true value, use pointer coords and element rect\n  if (value === true) {\n    // if dimensions are negative, \"switch\" edges\n    const width = is.number(rect.width) ? rect.width : rect.right - rect.left\n    const height = is.number(rect.height) ? rect.height : rect.bottom - rect.top\n\n    // don't use margin greater than half the relevent dimension\n    margin = Math.min(margin, Math.abs((name === 'left' || name === 'right' ? width : height) / 2))\n\n    if (width < 0) {\n      if (name === 'left') {\n        name = 'right'\n      } else if (name === 'right') {\n        name = 'left'\n      }\n    }\n    if (height < 0) {\n      if (name === 'top') {\n        name = 'bottom'\n      } else if (name === 'bottom') {\n        name = 'top'\n      }\n    }\n\n    if (name === 'left') {\n      const edge = width >= 0 ? rect.left : rect.right\n      return page.x < edge + margin\n    }\n    if (name === 'top') {\n      const edge = height >= 0 ? rect.top : rect.bottom\n      return page.y < edge + margin\n    }\n\n    if (name === 'right') {\n      return page.x > (width >= 0 ? rect.right : rect.left) - margin\n    }\n    if (name === 'bottom') {\n      return page.y > (height >= 0 ? rect.bottom : rect.top) - margin\n    }\n  }\n\n  // the remaining checks require an element\n  if (!is.element(element)) {\n    return false\n  }\n\n  return is.element(value)\n    ? // the value is an element to use as a resize handle\n      value === element\n    : // otherwise check if element matches value as selector\n      dom.matchesUpTo(element, value, interactableElement)\n}\n\n/* eslint-disable multiline-ternary */\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nfunction initCursors(browser: typeof import('@interactjs/utils/browser').default) {\n  return browser.isIe9\n    ? {\n        x: 'e-resize',\n        y: 's-resize',\n        xy: 'se-resize',\n\n        top: 'n-resize',\n        left: 'w-resize',\n        bottom: 's-resize',\n        right: 'e-resize',\n        topleft: 'se-resize',\n        bottomright: 'se-resize',\n        topright: 'ne-resize',\n        bottomleft: 'ne-resize',\n      }\n    : {\n        x: 'ew-resize',\n        y: 'ns-resize',\n        xy: 'nwse-resize',\n\n        top: 'ns-resize',\n        left: 'ew-resize',\n        bottom: 'ns-resize',\n        right: 'ew-resize',\n        topleft: 'nwse-resize',\n        bottomright: 'nwse-resize',\n        topright: 'nesw-resize',\n        bottomleft: 'nesw-resize',\n      }\n}\n/* eslint-enable multiline-ternary */\n\nfunction start({ iEvent, interaction }: { iEvent: InteractEvent<any, any>; interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) {\n    return\n  }\n\n  const resizeEvent = iEvent as ResizeEvent\n  const rect = interaction.rect\n\n  interaction._rects = {\n    start: extend({}, rect),\n    corrected: extend({}, rect),\n    previous: extend({}, rect),\n    delta: {\n      left: 0,\n      right: 0,\n      width: 0,\n      top: 0,\n      bottom: 0,\n      height: 0,\n    },\n  }\n\n  resizeEvent.edges = interaction.prepared.edges\n  resizeEvent.rect = interaction._rects.corrected\n  resizeEvent.deltaRect = interaction._rects.delta\n}\n\nfunction move({ iEvent, interaction }: { iEvent: InteractEvent<any, any>; interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) return\n\n  const resizeEvent = iEvent as ResizeEvent\n  const resizeOptions = interaction.interactable.options.resize\n  const invert = resizeOptions.invert\n  const invertible = invert === 'reposition' || invert === 'negate'\n\n  const current = interaction.rect\n  const { start: startRect, corrected, delta: deltaRect, previous } = interaction._rects\n\n  extend(previous, corrected)\n\n  if (invertible) {\n    // if invertible, copy the current rect\n    extend(corrected, current)\n\n    if (invert === 'reposition') {\n      // swap edge values if necessary to keep width/height positive\n      if (corrected.top > corrected.bottom) {\n        const swap = corrected.top\n\n        corrected.top = corrected.bottom\n        corrected.bottom = swap\n      }\n      if (corrected.left > corrected.right) {\n        const swap = corrected.left\n\n        corrected.left = corrected.right\n        corrected.right = swap\n      }\n    }\n  } else {\n    // if not invertible, restrict to minimum of 0x0 rect\n    corrected.top = Math.min(current.top, startRect.bottom)\n    corrected.bottom = Math.max(current.bottom, startRect.top)\n    corrected.left = Math.min(current.left, startRect.right)\n    corrected.right = Math.max(current.right, startRect.left)\n  }\n\n  corrected.width = corrected.right - corrected.left\n  corrected.height = corrected.bottom - corrected.top\n\n  for (const edge in corrected) {\n    deltaRect[edge] = corrected[edge] - previous[edge]\n  }\n\n  resizeEvent.edges = interaction.prepared.edges\n  resizeEvent.rect = corrected\n  resizeEvent.deltaRect = deltaRect\n}\n\nfunction end({ iEvent, interaction }: { iEvent: InteractEvent<any, any>; interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) return\n\n  const resizeEvent = iEvent as ResizeEvent\n\n  resizeEvent.edges = interaction.prepared.edges\n  resizeEvent.rect = interaction._rects.corrected\n  resizeEvent.deltaRect = interaction._rects.delta\n}\n\nfunction updateEventAxes({\n  iEvent,\n  interaction,\n}: {\n  iEvent: InteractEvent<any, any>\n  interaction: Interaction\n}) {\n  if (interaction.prepared.name !== 'resize' || !interaction.resizeAxes) return\n\n  const options = interaction.interactable.options\n  const resizeEvent = iEvent as ResizeEvent\n\n  if (options.resize.square) {\n    if (interaction.resizeAxes === 'y') {\n      resizeEvent.delta.x = resizeEvent.delta.y\n    } else {\n      resizeEvent.delta.y = resizeEvent.delta.x\n    }\n    resizeEvent.axes = 'xy'\n  } else {\n    resizeEvent.axes = interaction.resizeAxes\n\n    if (interaction.resizeAxes === 'x') {\n      resizeEvent.delta.y = 0\n    } else if (interaction.resizeAxes === 'y') {\n      resizeEvent.delta.x = 0\n    }\n  }\n}\n\nconst resize: Plugin = {\n  id: 'actions/resize',\n  before: ['actions/drag'],\n  install,\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.resizeAxes = 'xy'\n    },\n\n    'interactions:action-start': (arg) => {\n      start(arg)\n      updateEventAxes(arg)\n    },\n    'interactions:action-move': (arg) => {\n      move(arg)\n      updateEventAxes(arg)\n    },\n    'interactions:action-end': end,\n    'auto-start:check': resizeChecker,\n  },\n\n  defaults: {\n    square: false,\n    preserveAspectRatio: false,\n    axis: 'xy',\n\n    // use default margin\n    margin: NaN,\n\n    // object with props left, right, top, bottom which are\n    // true/false values to resize when the pointer is over that edge,\n    // CSS selectors to match the handles for each direction\n    // or the Elements for each handle\n    edges: null,\n\n    // a value of 'none' will limit the resize rect to a minimum of 0x0\n    // 'negate' will alow the rect to have negative width/height\n    // 'reposition' will keep the width/height positive by swapping\n    // the top and bottom edges and/or swapping the left and right edges\n    invert: 'none',\n  } as ResizableOptions,\n\n  cursors: null as ReturnType<typeof initCursors>,\n\n  getCursor({ edges, axis, name }: ActionProps) {\n    const cursors = resize.cursors\n    let result: string = null\n\n    if (axis) {\n      result = cursors[name + axis]\n    } else if (edges) {\n      let cursorKey = ''\n\n      for (const edge of ['top', 'bottom', 'left', 'right']) {\n        if (edges[edge]) {\n          cursorKey += edge\n        }\n      }\n\n      result = cursors[cursorKey]\n    }\n\n    return result\n  },\n\n  filterEventType: (type: string) => type.search('resize') === 0,\n\n  defaultMargin: null as number,\n}\n\nexport default resize\n", "/* eslint-disable no-console, eol-last, import/no-duplicates,  import/no-extraneous-dependencies, import/order */\nimport '@interactjs/actions/resize/plugin'\nimport interact from '@interactjs/interact/index'\nimport plugin from '@interactjs/actions/resize/plugin'\ninteract.use(plugin)"],
  "mappings": ";;;;;;;;;;;;AAkHA,QAAA;IACE;IACEA;IACAC;IACc;EACdC,IAAAA;;AAKFC,SAAOC,gBAAUC,QAAYJ,iBAAQ,QAAA,uBAAA,KAAA;AACrCE,eAAOG,UAAgBL,YAAQM,SAAa,SAAIN;AAEhDO,WAAAA,UAAaC,MAAUC,SAAS,KAAG;EACjC;UAC4B,IAAA,SAAA;AAE9BV,UAAQW,WAAU,SAAS;AAC3BX,WAAQY,QAAAA,SAAiB,OAAG;AAE5BV;AACF,SAAA,cAAA,KAAA;AAEA,QAAA;IACE;IAAQW;IAAaC;IAAcC;IAASC;EAAMC,IAAAA;AAAQ,MAAIC,CAAAA,MAAG;AAEjE,WAAS;EACP;AACF,QAAA,OAAA,OAAA,CAAA,GAAA,YAAA,OAAA,IAAA,IAAA;AAEA,QAAMC,gBAAgB,aAAa,QAAQC;AAC3C,MAAA,EAAMC,iBAAgBP,cAAaQ,YAIjC,YAAA,iBAAA,gBAAA,KAAA,YAAA,WAAA,MAAA,UAAA,cAAA,kBAAA,GAAA;AACCT,WAAAA;EAID;AAGF,MAAA,GAAA,OAAA,cAAA,KAAA,GAAA;AACA,UAAOU,cAAOF;MACZ,MAAMG;MACJC,OAAM;MACNC,KAAK;MACLC,QAAK;IACLC;eACD,QAAA,aAAA;AAED,kBAAWC,QAAQL,gBAAa,MAAA,cAAA,MAAA,OAAA,MAAA,YAAA,eAAA,aAAA,SAAA,MAAA,cAAA,UAAA,OAAA,aAAA;IAC9BA;AASF,gBAAA,OAAA,YAAA,QAAA,CAAA,YAAA;AAEAA,gBAAYC,MAAI,YAAc,OAAK,CAAA,YAAKD;AACxCA,QAAAA,YAAe,QAAGA,YAAe,SAAKA,YAAkB,OAAA,YAAA,QAAA;AAExD,UAAIA,SAAW;QACbN,MAAIY;QACFC,OAAM;MACNC;;EAEJ,OAAA;AACD,UAAM,QAAA,cAAA,SAAA,OAAA,KAAA,IAAA,KAAA,QAAA,OAAA;AACL,UAAMN,SAAQL,cAAcY,SAAS,OAAOd,KAAM,IAAGH,KAAKU,SAAQvB,OAAOG;AACzE,QAAA,SAAY,QAAGe;AAEf,UAAIK,SAASE;QACXV,MAAIY;QACFC,OAAM,QAAQ,MAAA,OAAA,SAAA,MAAA;MACdG;;EAEJ;AACF,SAAA,IAAA,SAAA,QAAA;AAEA;AACF,SAAA,UAAA,cAAA,SAAA,OAAA;AAEA,MAAA,GAASxB,OAAAA,OAAUI,GAAAA;AACjB,iBAAcQ,QAAQ,OAAE,UAAA,QAAA,YAAA;AACtBR,iBAAaQ,aAAQnB,UAAc,OAAGmB;AACtCR,iBAAaqB,YAAY,UAAS,OAAEb;AACpCR,QAAAA,GAAAA,OAAasB,QAAAA,IAAY,KAAA,eAAkB,KAAA,QAAA,IAAA,GAAA;AAE3C,mBAAcd,QAAQW,OAAK,OAAI,QAAc;eAC3CnB,QAAaQ,SAAQnB,MAAW;AACjC,mBAAUmB,QAAY,OAAK,OAAM,MAAA,SAAA,QAAA,OAAA;IAChCR;AACF,QAAA,GAAA,KAAA,QAAA,mBAAA,GAAA;AAEA,mBAAYQ,QAAQe,OAAAA,sBAAsB,QAAA;eACxCvB,GAAY,KAACQ,QAAQnB,MAAOkC,GAAAA;AAC7B,mBAAaC,QAAKhB,OAAQiB,SAAS,QAAA;;AAEpC,WAAA;EAEA;AACF,MAAA,GAAA,KAAA,OAAA,GAAA;AACA,iBAAYjB,QAAU,OAAA,UAAA;AACpBR,WAAAA;EAEA;AACF,SAAA,aAAA,QAAA;AACA;AACF,SAAA,gBAAA,MAAA,OAAA,MAAA,SAAA,qBAAA,MAAA,QAAA;AAWE,MAAA,CAAA,OAAA;AACA,WAAK0B;EACH;AAGF,MAAA,UAAA,MAAA;AAEE,UAAA,QAAA,GAAA,OAAA,KAAA,KAAA,IAAA,KAAA,QAAA,KAAA,QAAA,KAAA;AACA,UAAMC,SAAQC,GAAGC,OAAO3B,KAAKyB,MAAM,IAAGzB,KAAKyB,SAAQzB,KAAKU,SAAY,KAAK;AAGzE,aAAA,KAAA,IAAA,QAAA,KAAA,KAAA,SAAA,UAAA,SAAA,UAAA,QAAA,UAAA,CAAA,CAAA;AACAkB,QAAAA,QAASC,GAAKC;AAEd,UAAIL,SAAW,QAAA;AACb,eAAQ;MACNV,WAAO,SAAO,SAAA;AACf,eAAM;MACLA;IACF;AACF,QAAA,SAAA,GAAA;AACA,UAAIgB,SAAU,OAAE;AACd,eAAQ;MACNhB,WAAO,SAAQ,UAAA;AAChB,eAAM;MACLA;IACF;AACF,QAAA,SAAA,QAAA;AAEA,YAAQ,OAAK,SAAQ,IAAA,KAAA,OAAA,KAAA;AACnB,aAAMF,KAAI,IAAGY,OAAU;IACvB;AACF,QAAA,SAAA,OAAA;AACA,YAAQ,OAAK,UAAO,IAAA,KAAA,MAAA,KAAA;AAClB,aAAMZ,KAAI,IAAGkB,OAAU;IACvB;AACF,QAAA,SAAA,SAAA;AAEA,aAAQ,KAAK,KAAA,SAAS,IAAA,KAAA,QAAA,KAAA,QAAA;IACpB;AACF,QAAA,SAAA,UAAA;AACA,aAAQ,KAAK,KAAA,UAAU,IAAA,KAAA,SAAA,KAAA,OAAA;IACrB;EACF;AAGF,MAAA,CAAA,GAAA,QAAA,OAAA,GAAA;AACA,WAAQhC;EACN;AACF,SAAA,GAAA,QAAA,KAAA,IAGI,UAAA,UAEA,YAAA,SAAA,OAAA,mBAAA;;AAKN,SAAA,YAAA,SAAA;AACA,SAASV,QAAAA,QAAYJ;IACnB,GAAA;IAEM+C,GAAG;IACHC,IAAG;IACHC,KAAI;IAEJvB,MAAK;IACLF,QAAM;IACNG,OAAM;IACNF,SAAO;IACPyB,aAAS;IACTC,UAAAA;IACAC,YAAU;EACVC,IAAAA;IACD,GACD;IACEN,GAAG;IACHC,IAAG;IACHC,KAAI;IAEJvB,MAAK;IACLF,QAAM;IACNG,OAAM;IACNF,SAAO;IACPyB,aAAS;IACTC,UAAAA;IACAC,YAAU;EACVC;;;AAKR,MAAA;IAAuG;IAAtFC;EAAQ1C,IAAAA;AAA2E,MAAC2C,YAAA,SAAA,SAAA,YAAA,CAAA,YAAA,SAAA,OAAA;AACnG;EACE;AACF,QAAA,cAAA;AAEA,QAAMC,OAAAA,YAAcF;AACpB,cAAU,SAAG1C;IAEbA,OAAAA,OAAY6C,CAAAA,GAAM,IAAG;IACnBC,WAAOC,OAAW5C,CAAAA,GAAI,IAAC;IACvB6C,UAAS,OAAQ,CAAC,GAAE,IAAE7C;IACtB8C,OAAAA;MACAC,MAAO;MACLtC,OAAO;MACPC,OAAO;MACPe,KAAK;MACLd,QAAM;MACNC,QAAQ;IACRmB;EACF;cACD,QAAA,YAAA,SAAA;AAEDU,cAAYzB,OAAK,YAAc,OAACgC;AAChCP,cAAYzC,YAAOH,YAAY6C,OAAOG;AACtCJ;AACF,SAAA,KAAA,OAAA;AAEA,MAAA;IAAsG;IAAtFF;EAAQ1C,IAAAA;AAA2E,MAACoD,YAAA,SAAA,SAAA,YAAA,CAAA,YAAA,SAAA;AAAA;AAClG,QAAIpD,cAAYmD;AAEhB,QAAMP,gBAAcF,YAAqB,aAAA,QAAA;AACzC,QAAMlC,SAAAA,cAAgBR;AACtB,QAAMqD,aAAS7C,WAAc6C,gBAAM,WAAA;AACnC,QAAMC,UAAU,YAAS;AAEzB,QAAMC;IACN,OAAM;IAAET;IAAkBE,OAAAA;IAAWE;EAAkBD,IAAAA,YAAAA;SAAajD,UAAY6C,SAAM;AAEtFE,MAAAA,YAAe;AAGb,WAAA,WAAA,OAAA;AACAA,QAAAA,WAAOC,cAAmB;AAGxB,UAAA,UAAA,MAAA,UAAA,QAAA;AACA,cAAIA,OAAUlC,UAAMkC;AAClB,kBAAU,MAAGA,UAAa;AAE1BA,kBAAUlC,SAAMkC;;AAElB,UAAA,UAAA,OAAA,UAAA,OAAA;AACA,cAAIA,OAAUpC,UAAOoC;AACnB,kBAAU,OAAGA,UAAc;AAE3BA,kBAAUpC,QAAOoC;;IAEnB;EACF,OAAA;AAEA,cAAA,MAAA,KAAA,IAAA,QAAA,KAAA,UAAA,MAAA;AACAA,cAAUlC,SAAMkB,KAAQ,IAACuB,QAAW,QAAEC,UAAgB,GAAC;AACvDR,cAAUjC,OAAM,KAAGiB,IAAKyB,QAAIF,MAAQxC,UAAQyC,KAAU1C;AACtDkC,cAAUpC,QAAOoB,KAAKC,IAAIsB,QAAQ3C,OAAM4C,UAAU3C,IAAM;EACxDmC;AACF,YAAA,QAAA,UAAA,QAAA,UAAA;AAEAA,YAAUpB,SAAQoB,UAAUnC,SAAQmC,UAAUpC;AAC9CoC,aAAUd,QAASc,WAAUjC;AAE7B,cAAWC,QAAQgC,UAAW,QAAA,SAAA;EAC5BU;AACF,cAAA,QAAA,YAAA,SAAA;AAEAd,cAAYzB,OAAK;AACjByB,cAAYzC,YAAO6C;;AAErB,SAAA,IAAA,OAAA;AAEA,MAAA;IAAqG;IAAtFN;EAAQ1C,IAAAA;AAA2E,MAAC2D,YAAA,SAAA,SAAA,YAAA,CAAA,YAAA,SAAA;AAAA;AACjG,QAAI3D,cAAYmD;AAEhB,cAAMP,QAAcF,YAAqB,SAAA;AAEzCE,cAAYzB,OAAK,YAAc,OAACgC;AAChCP,cAAYzC,YAAOH,YAAY6C,OAAOG;AACtCJ;AACF,SAAA,gBAAA,OAAA;AAEA,MAAA;IAMG;IALDF;EACA1C,IAAAA;AAIF,MAAC4D,YAAA,SAAA,SAAA,YAAA,CAAA,YAAA;AAAA;AACC,QAAI5D,UAAYmD,YAASjC,aAAS;AAElC,QAAMT,cAAUT;AAChB,MAAA,QAAM4C,OAAW,QAAwB;AAEzC,QAAInC,YAAc,eAAS,KAAA;AACzB,kBAAIT,MAAY6D,IAAAA,YAAoB,MAAA;WAClCjB;AACD,kBAAM,MAAA,IAAA,YAAA,MAAA;;AAEP,gBAAA,OAAA;SACAA;AACD,gBAAM,OAAA,YAAA;AACLA,QAAAA,YAAgB,eAAeiB,KAAAA;AAE/B,kBAAI7D,MAAY6D,IAAAA;IACdjB,WAAAA,YAAmB,eAAI,KAAA;AACxB,kBAAU5C,MAAAA,IAAY6D;IACrBjB;EACF;AACF;AACF,IAAA,SAAA;EAEA,IAAMtD;EACJwE,QAAI,CAAA,cAAgB;EACpBC;EACAC,WAAO;IACPC,oBAAW,WAAA;AACT,UAAA;QAAyC;MAAlBjE,IAAAA;AAAY,kBAAC,aAAA;;iCAEnC,SAAA;AAED,YAAA,GAAA;AACE8C,sBAAU,GAAA;;gCAEX,SAAA;AACD,WAAA,GAAA;AACEoB,sBAAS,GAAA;;+BAEV;IACD,oBAAA;EACA;YACD;IAED7E,QAAU;IACRqC,qBAAa;IACbF,MAAAA;IAGA,QAAA;IAMA,OAAA;IAMA,QAAA;EACA6B;WACmB;EAErB9D,UAAS,OAAsC;AAE/C4E,QAAAA;MAA8C;MAAlChD;MAAOC;IAAMF,IAAAA;AAAkB,UAACkD,UAAA,OAAA;AAC1C,QAAA,SAAa;AACb,QAAIC,MAAc;AAElB,eAAU,QAAA,OAAA;IACRA,WAAS9E,OAAO;AACjB,UAAA,YAAiB;AAChB,iBAAI+E,QAAc,CAAA,OAAA,UAAA,QAAA,OAAA,GAAA;AAElB,YAAK,MAAMtD,OAAQ;AACjB,uBAAe;QACbsD;MACF;AACF,eAAA,QAAA;IAEAD;AACF,WAAA;EAEA;mBACD,UAAA,KAAA,OAAA,QAAA,MAAA;EAEDE,eAAe;AAEf9E;;;AClgBF+E,SAASC,IAAIC,MAAM;",
  "names": ["actions", "browser", "defaults", "resize", "cursors", "initCursors", "defaultMargin", "supportsTouch", "Interactable", "prototype", "resizable", "map", "methodDict", "interaction", "interactable", "element", "rect", "buttons", "arg", "page", "cur", "resizeOptions", "options", "object", "resizeEdges", "left", "right", "top", "bottom", "edge", "action", "name", "edges", "axis", "axes", "setPerAction", "setOnEvents", "preserveAspectRatio", "bool", "square", "value", "width", "is", "number", "margin", "Math", "min", "height", "x", "y", "xy", "topleft", "bottomright", "topright", "bottomleft", "iEvent", "_ref", "resizeEvent", "_rects", "start", "extend", "corrected", "previous", "delta", "prepared", "_ref2", "invert", "invertible", "current", "startRect", "max", "deltaRect", "_ref3", "_ref4", "resizeAxes", "id", "before", "install", "listeners", "move", "getCursor", "_ref6", "result", "cursorKey", "filterEventType", "interact", "use", "plugin"]
}
