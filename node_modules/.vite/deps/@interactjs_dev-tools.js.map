{
  "version": 3,
  "sources": ["../../.pnpm/@interactjs+dev-tools@1.10.27_@interactjs+modifiers@1.10.27_@interactjs+core@1.10.27_@interac_gjwt6c5varoousvfd43vynvhja/node_modules/@interactjs/dev-tools/plugin.ts", "../../.pnpm/@interactjs+dev-tools@1.10.27_@interactjs+modifiers@1.10.27_@interactjs+core@1.10.27_@interac_gjwt6c5varoousvfd43vynvhja/node_modules/@interactjs/dev-tools/index.ts"],
  "sourcesContent": ["import type Interaction from '@interactjs/core/Interaction'\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { Element, OptionMethod } from '@interactjs/core/types'\nimport domObjects from '@interactjs/utils/domObjects'\nimport { parentNode } from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport isNonNativeEvent from '@interactjs/utils/isNonNativeEvent'\nimport normalizeListeners from '@interactjs/utils/normalizeListeners'\nimport * as win from '@interactjs/utils/window'\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    logger: Logger\n  }\n}\n\ndeclare module '@interactjs/core/options' {\n  interface BaseDefaults {\n    devTools?: DevToolsOptions\n  }\n}\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    devTools: OptionMethod<DevToolsOptions>\n  }\n}\n\nexport interface DevToolsOptions {\n  ignore: { [P in keyof typeof CheckName]?: boolean }\n}\n\nexport interface Logger {\n  warn: (...args: any[]) => void\n  error: (...args: any[]) => void\n  log: (...args: any[]) => void\n}\n\nexport interface Check {\n  name: CheckName\n  text: string\n  perform: (interaction: Interaction) => boolean\n  getInfo: (interaction: Interaction) => any[]\n}\n\nenum CheckName {\n  touchAction = 'touchAction',\n  boxSizing = 'boxSizing',\n  noListeners = 'noListeners',\n}\n\nconst prefix = '[interact.js] '\nconst links = {\n  touchAction: 'https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action',\n  boxSizing: 'https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing',\n}\n\n// eslint-disable-next-line no-undef\nconst isProduction = process.env.NODE_ENV === 'production'\n\nfunction install(scope: Scope, { logger }: { logger?: Logger } = {}) {\n  const { Interactable, defaults } = scope\n\n  scope.logger = logger || console\n\n  defaults.base.devTools = {\n    ignore: {},\n  }\n\n  Interactable.prototype.devTools = function (options?: object) {\n    if (options) {\n      extend(this.options.devTools, options)\n      return this\n    }\n\n    return this.options.devTools\n  }\n\n  // can't set native events on non string targets without `addEventListener` prop\n  const { _onOff } = Interactable.prototype\n  Interactable.prototype._onOff = function (method, typeArg, listenerArg, options, filter) {\n    if (is.string(this.target) || this.target.addEventListener) {\n      return _onOff.call(this, method, typeArg, listenerArg, options, filter)\n    }\n\n    if (is.object(typeArg) && !is.array(typeArg)) {\n      options = listenerArg\n      listenerArg = null\n    }\n\n    const normalizedListeners = normalizeListeners(typeArg, listenerArg, filter)\n\n    for (const type in normalizedListeners) {\n      if (isNonNativeEvent(type, scope.actions)) continue\n      scope.logger.warn(\n        prefix +\n          `Can't add native \"${type}\" event listener to target without \\`addEventListener(type, listener, options)\\` prop.`,\n      )\n    }\n\n    return _onOff.call(this, method, normalizedListeners, options)\n  }\n}\n\nconst checks: Check[] = [\n  {\n    name: CheckName.touchAction,\n    perform({ element }) {\n      return !!element && !parentHasStyle(element, 'touchAction', /pan-|pinch|none/)\n    },\n    getInfo({ element }) {\n      return [element, links.touchAction]\n    },\n    text: 'Consider adding CSS \"touch-action: none\" to this element\\n',\n  },\n\n  {\n    name: CheckName.boxSizing,\n    perform(interaction) {\n      const { element } = interaction\n\n      return (\n        interaction.prepared.name === 'resize' &&\n        element instanceof domObjects.HTMLElement &&\n        !hasStyle(element, 'boxSizing', /border-box/)\n      )\n    },\n    text: 'Consider adding CSS \"box-sizing: border-box\" to this resizable element',\n    getInfo({ element }) {\n      return [element, links.boxSizing]\n    },\n  },\n\n  {\n    name: CheckName.noListeners,\n    perform(interaction) {\n      const actionName = interaction.prepared.name\n      const moveListeners = interaction.interactable?.events.types[`${actionName}move`] || []\n\n      return !moveListeners.length\n    },\n    getInfo(interaction) {\n      return [interaction.prepared.name, interaction.interactable]\n    },\n    text: 'There are no listeners set for this action',\n  },\n]\n\nfunction hasStyle(element: HTMLElement, prop: keyof CSSStyleDeclaration, styleRe: RegExp) {\n  const value = element.style[prop] || win.window.getComputedStyle(element)[prop]\n  return styleRe.test((value || '').toString())\n}\n\nfunction parentHasStyle(element: Element, prop: keyof CSSStyleDeclaration, styleRe: RegExp) {\n  let parent = element as HTMLElement\n\n  while (is.element(parent)) {\n    if (hasStyle(parent, prop, styleRe)) {\n      return true\n    }\n\n    parent = parentNode(parent) as HTMLElement\n  }\n\n  return false\n}\n\nconst id = 'dev-tools'\nconst defaultExport: Plugin = isProduction\n  ? { id, install: () => {} }\n  : {\n      id,\n      install,\n      listeners: {\n        'interactions:action-start': ({ interaction }, scope) => {\n          for (const check of checks) {\n            const options = interaction.interactable && interaction.interactable.options\n\n            if (\n              !(options && options.devTools && options.devTools.ignore[check.name]) &&\n              check.perform(interaction)\n            ) {\n              scope.logger.warn(prefix + check.text, ...check.getInfo(interaction))\n            }\n          }\n        },\n      },\n      checks,\n      CheckName,\n      links,\n      prefix,\n    }\n\nexport default defaultExport\n", "/* eslint-disable no-console, eol-last, import/no-duplicates,  import/no-extraneous-dependencies, import/order */\nimport '@interactjs/dev-tools/plugin'\nimport interact from '@interactjs/interact/index'\nimport plugin from '@interactjs/dev-tools/plugin'\ninteract.use(plugin)"],
  "mappings": "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",
  "names": ["CheckName", "prefix", "touchAction", "boxSizing", "logger", "arguments", "Interactable", "defaults", "scope", "console", "base", "ignore", "prototype", "options", "extend", "_onOff", "method", "listenerArg", "string", "target", "addEventListener", "object", "normalizedListeners", "normalizeListeners", "isNonNativeEvent", "checks", "name", "perform", "element", "_ref", "getInfo", "_ref2", "text", "interaction", "_ref3", "noListeners", "_interaction$interact", "actionName", "moveListeners", "hasStyle", "prop", "value", "window", "parentHasStyle", "parent", "id", "defaultExport", "install", "listeners", "interactable", "devTools", "links", "interact", "use", "plugin"]
}
