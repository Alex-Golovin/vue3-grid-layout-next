{
  "version": 3,
  "sources": ["../../.pnpm/@interactjs+actions@1.10.27_@interactjs+core@1.10.27_@interactjs+utils@1.10.27__@interactjs+utils@1.10.27/node_modules/@interactjs/actions/drag/plugin.ts", "../../.pnpm/@interactjs+actions@1.10.27_@interactjs+core@1.10.27_@interactjs+utils@1.10.27__@interactjs+utils@1.10.27/node_modules/@interactjs/actions/drag/index.ts"],
  "sourcesContent": ["import type { Interactable } from '@interactjs/core/Interactable'\nimport type { InteractEvent } from '@interactjs/core/InteractEvent'\nimport type { PerActionDefaults } from '@interactjs/core/options'\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { ListenersArg, OrBoolean } from '@interactjs/core/types'\nimport is from '@interactjs/utils/is'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    draggable(options: Partial<OrBoolean<DraggableOptions>> | boolean): this\n    draggable(): DraggableOptions\n    /**\n     * ```js\n     * interact(element).draggable({\n     *     onstart: function (event) {},\n     *     onmove : function (event) {},\n     *     onend  : function (event) {},\n     *\n     *     // the axis in which the first movement must be\n     *     // for the drag sequence to start\n     *     // 'xy' by default - any direction\n     *     startAxis: 'x' || 'y' || 'xy',\n     *\n     *     // 'xy' by default - don't restrict to one axis (move in any direction)\n     *     // 'x' or 'y' to restrict movement to either axis\n     *     // 'start' to restrict movement to the axis the drag started in\n     *     lockAxis: 'x' || 'y' || 'xy' || 'start',\n     *\n     *     // max number of drags that can happen concurrently\n     *     // with elements of this Interactable. Infinity by default\n     *     max: Infinity,\n     *\n     *     // max number of drags that can target the same element+Interactable\n     *     // 1 by default\n     *     maxPerElement: 2\n     * })\n     *\n     * var isDraggable = interact('element').draggable(); // true\n     * ```\n     *\n     * Get or set whether drag actions can be performed on the target\n     *\n     * @param options - true/false or An object with event\n     * listeners to be fired on drag events (object makes the Interactable\n     * draggable)\n     */\n    draggable(options?: Partial<OrBoolean<DraggableOptions>> | boolean): this | DraggableOptions\n  }\n}\n\ndeclare module '@interactjs/core/options' {\n  interface ActionDefaults {\n    drag: DraggableOptions\n  }\n}\n\ndeclare module '@interactjs/core/types' {\n  interface ActionMap {\n    drag?: typeof drag\n  }\n}\n\nexport type DragEvent = InteractEvent<'drag'>\n\nexport interface DraggableOptions extends PerActionDefaults {\n  startAxis?: 'x' | 'y' | 'xy'\n  lockAxis?: 'x' | 'y' | 'xy' | 'start'\n  oninertiastart?: ListenersArg\n  onstart?: ListenersArg\n  onmove?: ListenersArg\n  onend?: ListenersArg\n}\n\nfunction install(scope: Scope) {\n  const { actions, Interactable, defaults } = scope\n\n  Interactable.prototype.draggable = drag.draggable\n\n  actions.map.drag = drag\n  actions.methodDict.drag = 'draggable'\n\n  defaults.actions.drag = drag.defaults\n}\n\nfunction beforeMove({ interaction }) {\n  if (interaction.prepared.name !== 'drag') return\n\n  const axis = interaction.prepared.axis\n\n  if (axis === 'x') {\n    interaction.coords.cur.page.y = interaction.coords.start.page.y\n    interaction.coords.cur.client.y = interaction.coords.start.client.y\n\n    interaction.coords.velocity.client.y = 0\n    interaction.coords.velocity.page.y = 0\n  } else if (axis === 'y') {\n    interaction.coords.cur.page.x = interaction.coords.start.page.x\n    interaction.coords.cur.client.x = interaction.coords.start.client.x\n\n    interaction.coords.velocity.client.x = 0\n    interaction.coords.velocity.page.x = 0\n  }\n}\n\nfunction move({ iEvent, interaction }) {\n  if (interaction.prepared.name !== 'drag') return\n\n  const axis = interaction.prepared.axis\n\n  if (axis === 'x' || axis === 'y') {\n    const opposite = axis === 'x' ? 'y' : 'x'\n\n    iEvent.page[opposite] = interaction.coords.start.page[opposite]\n    iEvent.client[opposite] = interaction.coords.start.client[opposite]\n    iEvent.delta[opposite] = 0\n  }\n}\n\nconst draggable: Interactable['draggable'] = function draggable(\n  this: Interactable,\n  options?: DraggableOptions | boolean,\n): any {\n  if (is.object(options)) {\n    this.options.drag.enabled = options.enabled !== false\n    this.setPerAction('drag', options)\n    this.setOnEvents('drag', options)\n\n    if (/^(xy|x|y|start)$/.test(options.lockAxis)) {\n      this.options.drag.lockAxis = options.lockAxis\n    }\n    if (/^(xy|x|y)$/.test(options.startAxis)) {\n      this.options.drag.startAxis = options.startAxis\n    }\n\n    return this\n  }\n\n  if (is.bool(options)) {\n    this.options.drag.enabled = options\n\n    return this\n  }\n\n  return this.options.drag as DraggableOptions\n}\n\nconst drag: Plugin = {\n  id: 'actions/drag',\n  install,\n  listeners: {\n    'interactions:before-action-move': beforeMove,\n    'interactions:action-resume': beforeMove,\n\n    // dragmove\n    'interactions:action-move': move,\n    'auto-start:check': (arg) => {\n      const { interaction, interactable, buttons } = arg\n      const dragOptions = interactable.options.drag\n\n      if (\n        !(dragOptions && dragOptions.enabled) ||\n        // check mouseButton setting if the pointer is down\n        (interaction.pointerIsDown &&\n          /mouse|pointer/.test(interaction.pointerType) &&\n          (buttons & interactable.options.drag.mouseButtons) === 0)\n      ) {\n        return undefined\n      }\n\n      arg.action = {\n        name: 'drag',\n        axis: dragOptions.lockAxis === 'start' ? dragOptions.startAxis : dragOptions.lockAxis,\n      }\n\n      return false\n    },\n  },\n  draggable,\n  beforeMove,\n  move,\n  defaults: {\n    startAxis: 'xy',\n    lockAxis: 'xy',\n  } as DraggableOptions,\n\n  getCursor() {\n    return 'move'\n  },\n\n  filterEventType: (type: string) => type.search('drag') === 0,\n}\n\nexport default drag\n", "/* eslint-disable no-console, eol-last, import/no-duplicates,  import/no-extraneous-dependencies, import/order */\nimport '@interactjs/actions/drag/plugin'\nimport interact from '@interactjs/interact/index'\nimport plugin from '@interactjs/actions/drag/plugin'\ninteract.use(plugin)"],
  "mappings": ";;;;;;;;;;AAyEA,QAAA;IACE;IAAQA;IAASC;EAAcC,IAAAA;AAAS,eAAS,UAAA,YAAA,KAAA;AAEjDD,UAAAA,IAAY,OAACE;AAEbH,UAAQI,WAAWC,OAAI;AACvBL,WAAQM,QAAAA,OAAe,KAAG;AAE1BJ;AACF,SAAA,WAAA,MAAA;AAEA,MAAA;IAAqC;EAAfK,IAAAA;AAAY,MAACC,YAAA,SAAA,SAAA;AAAA;AACjC,QAAID,OAAAA,YAAqBE,SAAS;AAElC,MAAA,SAAaF,KAAAA;AAEb,gBAAa,OAAK,IAAA,KAAA,IAAA,YAAA,OAAA,MAAA,KAAA;AAChBA,gBAAYG,OAAOC,IAAIC,OAAM,IAAGL,YAAYG,OAAOG,MAAMD,OAAM;AAC/DL,gBAAYG,OAAOC,SAAIG,OAAWP,IAAAA;AAElCA,gBAAYG,OAAOK,SAASD,KAAAA,IAAQ;aACpCP,SAAkB,KAACQ;AACpB,gBAAUC,OAAS,IAAK,KAAA,IAAA,YAAA,OAAA,MAAA,KAAA;AACvBT,gBAAYG,OAAOC,IAAIC,OAAM,IAAGL,YAAYG,OAAOG,MAAMD,OAAM;AAC/DL,gBAAYG,OAAOC,SAAIG,OAAWP,IAAAA;AAElCA,gBAAYG,OAAOK,SAASD,KAAAA,IAAQ;;AAEtC;AACF,SAAA,KAAA,OAAA;AAEA,MAAA;IAAuC;IAAvBG;EAAQV,IAAAA;AAAY,MAACW,YAAA,SAAA,SAAA;AAAA;AACnC,QAAIX,OAAAA,YAAqBE,SAAS;AAElC,MAAA,SAAaF,OAAAA,SAAYY,KAASH;AAElC,UAAQ,WAAQ,SAAQ,MAAU,MAAA;AAChC,WAAMI,KAAAA,YAAe,YAAc,OAAM,MAAA,KAAA;AAEzCH,WAAOL,OAAKQ,YAAYb,YAAYG,OAAOG,MAAMD,OAAKQ;AACtDH,WAAOH,MAAM,YAAU;EACvBG;AACF;AACF,IAAA,YAAA,SAAAI,WAAA,SAAA;AAEA,MAAMA,GAAAA,OAAoC,OAAG,GAAA;AAI3C,SAAOC,QAAOC,KAAAA,UAAU,QAAA,YAAA;AACtB,SAAKA,aAAaC,QAAO,OAAGD;AAC5B,SAAKE,YAAY,QAAO,OAAEF;AAC1B,QAAI,mBAAmB,KAAEA,QAAQ,QAAA,GAAA;AAEjC,WAAI,QAAA,KAAA,WAAwBA,QAAQG;;AAEpC,QAAA,aAAA,KAAA,QAAA,SAAA,GAAA;AACA,WAAI,QAAA,KAAaC,YAAaC,QAAU;;AAExC,WAAA;EAEA;AACF,MAAA,GAAA,KAAA,OAAA,GAAA;AAEA,SAAOC,QAAKN,KAAQ,UAAE;AACpB,WAAKA;EAEL;AACF,SAAA,KAAA,QAAA;AAEA;AACF,IAAC,OAAA;EAED,IAAMlB;EACJyB;EACAC,WAAO;IACPC,mCAAW;IACT,8BAAA;IAGA,4BAAA;IACA,oBAAA,SAA0B;AAC1B,YAAA;QACE;QAAQzB;QAAa0B;MAAcC,IAAAA;AAAQ,YAAIC,cAAG,aAAA,QAAA;AAClD,UAAA,EAAMC,eAAcH,YAAaV,YAI/B,YAAA,iBAAA,gBAAA,KAAA,YAAA,WAAA,MAAA,UAAA,aAAA,QAAA,KAAA,kBAAA,GAAA;AACChB,eAAAA;MAID;AACF,UAAA,SAAA;QAEA4B,MAAIE;QACF5B,MAAM,YAAM,aAAA,UAAA,YAAA,YAAA,YAAA;MACZO;aACD;IAED;EACF;;EAEFK;EACAiB;EACAC,UAAI;IACJrC,WAAU;IACR0B,UAAS;EACTF;cACmB;AAErBc,WAASA;EACP;mBACD,UAAA,KAAA,OAAA,MAAA,MAAA;;;;ACvLHC,SAASC,IAAIC,IAAM;",
  "names": ["actions", "Interactable", "defaults", "prototype", "map", "drag", "methodDict", "interaction", "_ref", "name", "coords", "cur", "page", "start", "client", "velocity", "axis", "iEvent", "_ref2", "prepared", "opposite", "draggable", "object", "options", "enabled", "setPerAction", "lockAxis", "test", "startAxis", "bool", "id", "install", "listeners", "interactable", "buttons", "arg", "dragOptions", "action", "beforeMove", "move", "getCursor", "interact", "use", "plugin"]
}
